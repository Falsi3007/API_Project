select * from API_PROJECT.YT_DATA.YOUTUBE_CHANNEL_DATA;

truncate table API_PROJECT.YT_DATA.YOUTUBE_CHANNEL_DATA1;

select * from API_PROJECT.YT_DATA.YOUTUBE_CHANNEL_DATA1;

MERGE INTO API_PROJECT.YT_DATA.YOUTUBE_CHANNEL_DATA1 AS t
USING (select distinct * from API_PROJECT.YT_DATA.YOUTUBE_CHANNEL_DATA )AS s
ON t.CHANNELNAME = s.CHANNELNAME
WHEN MATCHED THEN
    UPDATE SET 
        t.SUBSCRIBERS = s.SUBSCRIBERS,
        t.VIEWS = s.VIEWS,
        t.TOTALVIDEOS = s.TOTALVIDEOS
WHEN NOT MATCHED THEN
    INSERT (CHANNELNAME, SUBSCRIBERS, VIEWS, TOTALVIDEOS, PUBLISHEDAT)
    VALUES (s.CHANNELNAME, s.SUBSCRIBERS, s.VIEWS, s.TOTALVIDEOS, s.PUBLISHEDAT);





select * from API_PROJECT.YT_DATA.YOUTUBE_PLAYLIST_DATA;

truncate table API_PROJECT.YT_DATA.YOUTUBE_PLAYLIST_DATA1;

select * from API_PROJECT.YT_DATA.YOUTUBE_PLAYLIST_DATA1;

MERGE INTO API_PROJECT.YT_DATA.YOUTUBE_PLAYLIST_DATA1 AS t
USING (select distinct * from API_PROJECT.YT_DATA.YOUTUBE_PLAYLIST_DATA )AS s
ON t.PLAYLISTID = s.PLAYLISTID
WHEN MATCHED THEN
    UPDATE SET 
        t.TOTALVIDEOS = s.TOTALVIDEOS
WHEN NOT MATCHED THEN
    INSERT (CHANNELNAME, PLAYLISTID, PLAYLISTTITLE, TOTALVIDEOS)
    VALUES (s.CHANNELNAME, s.PLAYLISTID, s.PLAYLISTTITLE, s.TOTALVIDEOS);





    
select * from API_PROJECT.YT_DATA.YOUTUBE_VIDEO_DATA;

truncate table API_PROJECT.YT_DATA.YOUTUBE_VIDEO_DATA1;

select * from API_PROJECT.YT_DATA.YOUTUBE_VIDEO_DATA1;

MERGE INTO API_PROJECT.YT_DATA.YOUTUBE_VIDEO_DATA1 AS t
USING (select distinct * from API_PROJECT.YT_DATA.YOUTUBE_VIDEO_DATA )AS s
ON t.VIDEOTITLE = s.VIDEOTITLE
WHEN MATCHED THEN
    UPDATE SET 
        t.VIEWS = s.VIEWS,
        t.LIKES = s.LIKES
WHEN NOT MATCHED THEN
    INSERT (VIDEOID, PUBLISHEDAT, CHANNELTITLE, CHANNELID, VIDEOTITLE, LIKES, VIEWS)
    VALUES (s.VIDEOID, s.PUBLISHEDAT, s.CHANNELTITLE, s.CHANNELID, s.VIDEOTITLE, s.LIKES, s.VIEWS);
